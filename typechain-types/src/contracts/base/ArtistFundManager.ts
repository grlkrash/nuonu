/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ArtistFundManager {
  export type ArtistStruct = {
    id: string;
    wallet: AddressLike;
    verified: boolean;
  };

  export type ArtistStructOutput = [
    id: string,
    wallet: string,
    verified: boolean
  ] & { id: string; wallet: string; verified: boolean };

  export type GrantStruct = {
    id: string;
    title: string;
    amount: BigNumberish;
    funder: AddressLike;
    active: boolean;
  };

  export type GrantStructOutput = [
    id: string,
    title: string,
    amount: bigint,
    funder: string,
    active: boolean
  ] & {
    id: string;
    title: string;
    amount: bigint;
    funder: string;
    active: boolean;
  };
}

export interface ArtistFundManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "artists"
      | "awardGrant"
      | "createGrant"
      | "distributeFunds"
      | "getArtist"
      | "getGrant"
      | "getPendingFunds"
      | "grantApplications"
      | "grants"
      | "owner"
      | "pendingFunds"
      | "registerArtist"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArtistRegistered"
      | "FundsDistributed"
      | "GrantAwarded"
      | "GrantCreated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "artists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "awardGrant",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createGrant",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFunds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getArtist", values: [string]): string;
  encodeFunctionData(functionFragment: "getGrant", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPendingFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantApplications",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "grants", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerArtist",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "artists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "awardGrant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getArtist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGrant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grants", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ArtistRegisteredEvent {
  export type InputTuple = [artistId: string, wallet: AddressLike];
  export type OutputTuple = [artistId: string, wallet: string];
  export interface OutputObject {
    artistId: string;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDistributedEvent {
  export type InputTuple = [
    artistId: string,
    wallet: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [artistId: string, wallet: string, amount: bigint];
  export interface OutputObject {
    artistId: string;
    wallet: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantAwardedEvent {
  export type InputTuple = [
    grantId: string,
    artistId: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [grantId: string, artistId: string, amount: bigint];
  export interface OutputObject {
    grantId: string;
    artistId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantCreatedEvent {
  export type InputTuple = [
    grantId: string,
    title: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [grantId: string, title: string, amount: bigint];
  export interface OutputObject {
    grantId: string;
    title: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArtistFundManager extends BaseContract {
  connect(runner?: ContractRunner | null): ArtistFundManager;
  waitForDeployment(): Promise<this>;

  interface: ArtistFundManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  artists: TypedContractMethod<
    [arg0: string],
    [
      [string, string, boolean] & {
        id: string;
        wallet: string;
        verified: boolean;
      }
    ],
    "view"
  >;

  awardGrant: TypedContractMethod<
    [grantId: string, artistId: string],
    [void],
    "nonpayable"
  >;

  createGrant: TypedContractMethod<
    [grantId: string, title: string, amount: BigNumberish],
    [void],
    "payable"
  >;

  distributeFunds: TypedContractMethod<
    [artistId: string],
    [void],
    "nonpayable"
  >;

  getArtist: TypedContractMethod<
    [artistId: string],
    [ArtistFundManager.ArtistStructOutput],
    "view"
  >;

  getGrant: TypedContractMethod<
    [grantId: string],
    [ArtistFundManager.GrantStructOutput],
    "view"
  >;

  getPendingFunds: TypedContractMethod<[artistId: string], [bigint], "view">;

  grantApplications: TypedContractMethod<
    [arg0: string, arg1: string],
    [boolean],
    "view"
  >;

  grants: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        id: string;
        title: string;
        amount: bigint;
        funder: string;
        active: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingFunds: TypedContractMethod<[arg0: string], [bigint], "view">;

  registerArtist: TypedContractMethod<
    [artistId: string, wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "artists"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, boolean] & {
        id: string;
        wallet: string;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "awardGrant"
  ): TypedContractMethod<
    [grantId: string, artistId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGrant"
  ): TypedContractMethod<
    [grantId: string, title: string, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "distributeFunds"
  ): TypedContractMethod<[artistId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getArtist"
  ): TypedContractMethod<
    [artistId: string],
    [ArtistFundManager.ArtistStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGrant"
  ): TypedContractMethod<
    [grantId: string],
    [ArtistFundManager.GrantStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingFunds"
  ): TypedContractMethod<[artistId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantApplications"
  ): TypedContractMethod<[arg0: string, arg1: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "grants"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        id: string;
        title: string;
        amount: bigint;
        funder: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingFunds"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerArtist"
  ): TypedContractMethod<
    [artistId: string, wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ArtistRegistered"
  ): TypedContractEvent<
    ArtistRegisteredEvent.InputTuple,
    ArtistRegisteredEvent.OutputTuple,
    ArtistRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "FundsDistributed"
  ): TypedContractEvent<
    FundsDistributedEvent.InputTuple,
    FundsDistributedEvent.OutputTuple,
    FundsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "GrantAwarded"
  ): TypedContractEvent<
    GrantAwardedEvent.InputTuple,
    GrantAwardedEvent.OutputTuple,
    GrantAwardedEvent.OutputObject
  >;
  getEvent(
    key: "GrantCreated"
  ): TypedContractEvent<
    GrantCreatedEvent.InputTuple,
    GrantCreatedEvent.OutputTuple,
    GrantCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ArtistRegistered(string,address)": TypedContractEvent<
      ArtistRegisteredEvent.InputTuple,
      ArtistRegisteredEvent.OutputTuple,
      ArtistRegisteredEvent.OutputObject
    >;
    ArtistRegistered: TypedContractEvent<
      ArtistRegisteredEvent.InputTuple,
      ArtistRegisteredEvent.OutputTuple,
      ArtistRegisteredEvent.OutputObject
    >;

    "FundsDistributed(string,address,uint256)": TypedContractEvent<
      FundsDistributedEvent.InputTuple,
      FundsDistributedEvent.OutputTuple,
      FundsDistributedEvent.OutputObject
    >;
    FundsDistributed: TypedContractEvent<
      FundsDistributedEvent.InputTuple,
      FundsDistributedEvent.OutputTuple,
      FundsDistributedEvent.OutputObject
    >;

    "GrantAwarded(string,string,uint256)": TypedContractEvent<
      GrantAwardedEvent.InputTuple,
      GrantAwardedEvent.OutputTuple,
      GrantAwardedEvent.OutputObject
    >;
    GrantAwarded: TypedContractEvent<
      GrantAwardedEvent.InputTuple,
      GrantAwardedEvent.OutputTuple,
      GrantAwardedEvent.OutputObject
    >;

    "GrantCreated(string,string,uint256)": TypedContractEvent<
      GrantCreatedEvent.InputTuple,
      GrantCreatedEvent.OutputTuple,
      GrantCreatedEvent.OutputObject
    >;
    GrantCreated: TypedContractEvent<
      GrantCreatedEvent.InputTuple,
      GrantCreatedEvent.OutputTuple,
      GrantCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
